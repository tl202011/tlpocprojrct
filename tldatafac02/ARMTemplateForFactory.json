{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "tldatafac02"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"Databrickslinked_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'Databrickslinked'"
		},
		"FileServer1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'FileServer1'"
		},
		"SqlServer1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServer1'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://tlstroage.dfs.core.windows.net"
		},
		"FileServer1_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Users\\admin\\Desktop\\TL\\"
		},
		"FileServer1_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "admin"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CHECK SOURCE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {
									"filename": "card_info.csv",
									"path": "TL-Sent_chun"
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"folder": {
					"name": "TEST"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MAIN_BATCH')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "STREAM_COMMON",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "STREAM_COMMON",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_STREAM_NM": "SENT_RISK",
								"P_RUN_MODE": "R"
							}
						}
					},
					{
						"name": "PCS_COMMON_DATABRICKS",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "STREAM_COMMON",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PCS_COMMON_DATABRICKS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_DATABRICKS": "Life Insurance Assessment from unknown business"
							}
						}
					},
					{
						"name": "STREAM_COMMON_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "STREAM_COMMON",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_STREAM_NM": "TL-SENT_CHUN",
								"P_RUN_MODE": "R"
							}
						}
					},
					{
						"name": "PCS_COMMON_DATABRICKS_Churn",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "STREAM_COMMON_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PCS_COMMON_DATABRICKS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_DATABRICKS": "ChurnPrediction"
							}
						}
					}
				],
				"folder": {
					"name": "COMMON JOB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/STREAM_COMMON')]",
				"[concat(variables('factoryId'), '/pipelines/PCS_COMMON_DATABRICKS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PCS_COMMON_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "INSERT PROCESS LOG",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[CNTL].[PROC_CNTL_START_PCS]",
								"storedProcedureParameters": {
									"P_PCS_NM": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.P_PROCESS_NM",
											"type": "Expression"
										}
									},
									"P_RUN_MODE": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.P_RUN_MODE",
											"type": "Expression"
										}
									},
									"P_STREAM_SEQ_ID": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.P_STREAM_SEQ_ID",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "GET SKIP FLAG",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "INSERT PROCESS LOG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "V_SKIP_PROCESS",
							"value": {
								"value": "@activity('INSERT PROCESS LOG').output.FIRSTROW.SKIP_PROCESS",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CHECK SKIP FLAG",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GET SKIP FLAG",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "GET LOAD ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('V_SKIP_PROCESS'),'0')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SKIP PROCESS",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": "SELECT 1",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SqlServerTable1",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "RUN_PCS_2",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PCS_COMMON_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"P_PCS_NM": {
												"value": "@pipeline().parameters.P_PROCESS_NM",
												"type": "Expression"
											},
											"P_RUN_MODE": {
												"value": "@pipeline().parameters.P_RUN_MODE",
												"type": "Expression"
											},
											"P_LOAD_ID": {
												"value": "@variables('V_LOAD_ID')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "GET LOAD ID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "INSERT PROCESS LOG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "V_LOAD_ID",
							"value": {
								"value": "@activity('INSERT PROCESS LOG').output.FIRSTROW.LOAD_ID",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"P_PROCESS_NM": {
						"type": "string",
						"defaultValue": "SINGHAARM_SINGHAARM_AGENT"
					},
					"P_RUN_MODE": {
						"type": "string",
						"defaultValue": "R"
					},
					"P_STREAM_SEQ_ID": {
						"type": "string",
						"defaultValue": "-999"
					}
				},
				"variables": {
					"V_SKIP_PROCESS": {
						"type": "String",
						"defaultValue": "999"
					},
					"V_LOAD_ID": {
						"type": "String",
						"defaultValue": "999"
					}
				},
				"folder": {
					"name": "COMMON JOB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerTable1')]",
				"[concat(variables('factoryId'), '/pipelines/PCS_COMMON_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PCS_COMMON_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CHECK LATEST LOG",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GET LATEST LOG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('GET LATEST LOG').output.FIRSTROW.LTST_LOG_F,'1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "ABORT CHECK LATEST LOG",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": "SELECT 1/0",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SqlServerTable1",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "PASS CHECK LATEST LOG",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": "SELECT 1",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SqlServerTable1",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					},
					{
						"name": "GET PROCESS INFORMATION",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[CNTL].[PROC_GET_PCS]",
								"storedProcedureParameters": {
									"P_PCS_NM": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.P_PCS_NM",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "GET STREAM INFORMATION",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SET STREAM_NM",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SET FILE_PATH",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SET FILE_NAME",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[CNTL].[PROC_GET_STREAM_DT]",
								"storedProcedureParameters": {
									"P_PCS_NM": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.P_PCS_NM",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "SET STREAM DATE",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GET STREAM INFORMATION",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "V_AS_AT_DT",
							"value": {
								"value": "@activity('GET STREAM INFORMATION').output.FIRSTROW.AS_AT_DT",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CHECK DNDP",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GET DNDP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('GET DNDP').output.FIRSTROW.DPND_F,'1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "ABORT CHECK DNDP",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": "SELECT 1/0",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SqlServerTable1",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "PASS CHECK DNDP",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": "SELECT 1",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SqlServerTable1",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					},
					{
						"name": "GET LATEST LOG",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SET STREAM DATE",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SET CONNECTION_NM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[CNTL].[PROC_CHK_LTST_PCS]",
								"storedProcedureParameters": {
									"P_LOAD_ID": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.P_LOAD_ID",
											"type": "Expression"
										}
									},
									"P_PCS_NM": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.P_PCS_NM",
											"type": "Expression"
										}
									},
									"P_RUN_MODE": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.P_RUN_MODE",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "GET DNDP",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CHECK LATEST LOG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[CNTL].[PROC_CHK_DPND_PCS]",
								"storedProcedureParameters": {
									"P_AS_AT_DT": {
										"type": "String",
										"value": {
											"value": "@variables('V_AS_AT_DT')",
											"type": "Expression"
										}
									},
									"P_LOAD_ID": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.P_LOAD_ID",
											"type": "Expression"
										}
									},
									"P_PCS_NM": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.P_PCS_NM",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "UPDATE FAILED ON LATEST LOG",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CHECK LATEST LOG",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CNTL].[PROC_UDT_PCS]",
							"storedProcedureParameters": {
								"P_CNT_SRC": {
									"value": null,
									"type": "String"
								},
								"P_CNT_TGT": {
									"value": null,
									"type": "String"
								},
								"P_LOAD_ID": {
									"value": {
										"value": "@pipeline().parameters.P_LOAD_ID",
										"type": "Expression"
									},
									"type": "String"
								},
								"P_PCS_NM": {
									"value": {
										"value": "@pipeline().parameters.P_PCS_NM",
										"type": "Expression"
									},
									"type": "String"
								},
								"P_RMRK": {
									"value": "PREVIOUS CYCLE PROCESS DID NOT COMPLETE",
									"type": "String"
								},
								"P_ST": {
									"value": "FAILED",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServer1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "UPDATE FAILED ON DEPENDENCIES",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CHECK DNDP",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CNTL].[PROC_UDT_PCS]",
							"storedProcedureParameters": {
								"P_CNT_SRC": {
									"value": null,
									"type": "String"
								},
								"P_CNT_TGT": {
									"value": null,
									"type": "String"
								},
								"P_LOAD_ID": {
									"value": {
										"value": "@pipeline().parameters.P_LOAD_ID",
										"type": "Expression"
									},
									"type": "String"
								},
								"P_PCS_NM": {
									"value": {
										"value": "@pipeline().parameters.P_PCS_NM",
										"type": "Expression"
									},
									"type": "String"
								},
								"P_RMRK": {
									"value": "CHECKING DEPENDENCY FAILED",
									"type": "String"
								},
								"P_ST": {
									"value": "FAILED",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServer1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CHECK RECONCILE",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Copy data1').output.dataRead,activity('Copy data1').output.dataWritten)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "ABORT CHECK RECONCILE",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": "SELECT 1/0",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SqlServerTable1",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					},
					{
						"name": "UPDATE SUCCESS",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CHECK RECONCILE_copy2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CNTL].[PROC_UDT_PCS]",
							"storedProcedureParameters": {
								"P_CNT_SRC": {
									"value": {
										"value": "@activity('Copy data2').output.rowsRead",
										"type": "Expression"
									},
									"type": "String"
								},
								"P_CNT_TGT": {
									"value": {
										"value": "@activity('Copy data2').output.rowsCopied",
										"type": "Expression"
									},
									"type": "String"
								},
								"P_LOAD_ID": {
									"value": {
										"value": "@pipeline().parameters.P_LOAD_ID",
										"type": "Expression"
									},
									"type": "String"
								},
								"P_PCS_NM": {
									"value": {
										"value": "@pipeline().parameters.P_PCS_NM",
										"type": "Expression"
									},
									"type": "String"
								},
								"P_RMRK": {
									"value": null,
									"type": "String"
								},
								"P_ST": {
									"value": "SUCCESS",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServer1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "UPDATE FAILED ON RECONCILE",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CHECK RECONCILE",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CNTL].[PROC_UDT_PCS]",
							"storedProcedureParameters": {
								"P_CNT_SRC": {
									"value": {
										"value": "@activity('Copy data1').output.dataRead",
										"type": "Expression"
									},
									"type": "String"
								},
								"P_CNT_TGT": {
									"value": {
										"value": "@activity('Copy data1').output.datawritten",
										"type": "Expression"
									},
									"type": "String"
								},
								"P_LOAD_ID": {
									"value": {
										"value": "@pipeline().parameters.P_LOAD_ID",
										"type": "Expression"
									},
									"type": "String"
								},
								"P_PCS_NM": {
									"value": {
										"value": "@pipeline().parameters.P_PCS_NM",
										"type": "Expression"
									},
									"type": "String"
								},
								"P_RMRK": {
									"value": "RECONCILE FAILED",
									"type": "String"
								},
								"P_ST": {
									"value": "FAILED",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServer1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "UPDATE FAILED ON COPY ACTIVITY",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CNTL].[PROC_UDT_PCS]",
							"storedProcedureParameters": {
								"P_CNT_SRC": {
									"value": null,
									"type": "String"
								},
								"P_CNT_TGT": {
									"value": null,
									"type": "String"
								},
								"P_LOAD_ID": {
									"value": {
										"value": "@pipeline().parameters.P_LOAD_ID",
										"type": "Expression"
									},
									"type": "String"
								},
								"P_PCS_NM": {
									"value": {
										"value": "@pipeline().parameters.P_PCS_NM",
										"type": "Expression"
									},
									"type": "String"
								},
								"P_RMRK": {
									"value": "COPY ACTIVITY FAILED",
									"type": "String"
								},
								"P_ST": {
									"value": "FAILED",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServer1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SET FILE_NAME",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GET PROCESS INFORMATION",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "V_FILE_NAME",
							"value": {
								"value": "@activity('GET PROCESS INFORMATION').output.firstrow.SRC_TBL",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SET FILE_PATH",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GET PROCESS INFORMATION",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "V_FILE_PATH",
							"value": {
								"value": "@activity('GET PROCESS INFORMATION').output.firstrow.PATH",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SET STREAM_NM",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GET PROCESS INFORMATION",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "V_STREAM_NM",
							"value": {
								"value": "@activity('GET PROCESS INFORMATION').output.firstrow.STREAM_NM",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SET CONNECTION_NM",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GET STREAM INFORMATION",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "V_CONNECTION_NM",
							"value": {
								"value": "@activity('GET STREAM INFORMATION').output.firstrow.CONNECTION_NM",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CHECK DNDP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@variables('V_FILE_NAME')",
										"type": "Expression"
									},
									"path": {
										"value": "@variables('V_CONNECTION_NM')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText2",
								"type": "DatasetReference",
								"parameters": {
									"p_container": {
										"value": "@variables('V_FILE_PATH')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CHECK RECONCILE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText4",
								"type": "DatasetReference",
								"parameters": {
									"p_container": {
										"value": "@variables('V_FILE_PATH')",
										"type": "Expression"
									},
									"p_filename": "@variables('V_FILE_NAME')"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet1",
								"type": "DatasetReference",
								"parameters": {
									"p_container": "@variables('V_FILE_PATH')"
								}
							}
						]
					},
					{
						"name": "CHECK RECONCILE_copy2",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Copy data2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Copy data2').output.rowsRead,activity('Copy data2').output.rowsCopied)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "ABORT CHECK RECONCILE_copy1",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": "SELECT 1/0",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SqlServerTable1",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					},
					{
						"name": "UPDATE FAILED ON RECONCILE_copy1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CHECK RECONCILE_copy2",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CNTL].[PROC_UDT_PCS]",
							"storedProcedureParameters": {
								"P_CNT_SRC": {
									"value": {
										"value": "@activity('Copy data1').output.rowsRead",
										"type": "Expression"
									},
									"type": "String"
								},
								"P_CNT_TGT": {
									"value": {
										"value": "@activity('Copy data1').output.rowsCopied",
										"type": "Expression"
									},
									"type": "String"
								},
								"P_LOAD_ID": {
									"value": {
										"value": "@pipeline().parameters.P_LOAD_ID",
										"type": "Expression"
									},
									"type": "String"
								},
								"P_PCS_NM": {
									"value": {
										"value": "@pipeline().parameters.P_PCS_NM",
										"type": "Expression"
									},
									"type": "String"
								},
								"P_RMRK": {
									"value": "RECONCILE FAILED",
									"type": "String"
								},
								"P_ST": {
									"value": "FAILED",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServer1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"P_PCS_NM": {
						"type": "string",
						"defaultValue": "SINGHAARM_SINGHAARM_AGENT"
					},
					"P_RUN_MODE": {
						"type": "string",
						"defaultValue": "R"
					},
					"P_LOAD_ID": {
						"type": "string",
						"defaultValue": "999"
					}
				},
				"variables": {
					"V_SKIP_PROCESS": {
						"type": "String",
						"defaultValue": "0"
					},
					"V_AS_AT_DT": {
						"type": "String",
						"defaultValue": "999"
					},
					"V_FILE_NAME": {
						"type": "String",
						"defaultValue": "-999"
					},
					"V_STREAM_NM": {
						"type": "String",
						"defaultValue": "-999"
					},
					"V_FILE_PATH": {
						"type": "String",
						"defaultValue": "-999"
					},
					"V_CONNECTION_NM": {
						"type": "String",
						"defaultValue": "-999"
					}
				},
				"folder": {
					"name": "COMMON JOB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerTable1')]",
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText2')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText4')]",
				"[concat(variables('factoryId'), '/datasets/Parquet1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PCS_COMMON_DATABRICKS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SALES PREDICTION MODEL",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "CHECK DNDP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat('/Shared/',pipeline().parameters.P_DATABRICKS)",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "Databrickslinked",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "INSERT PROCESS LOG",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[CNTL].[PROC_CNTL_START_PCS]",
								"storedProcedureParameters": {
									"P_PCS_NM": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.P_PCS_NM",
											"type": "Expression"
										}
									},
									"P_RUN_MODE": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.P_RUN_MODE",
											"type": "Expression"
										}
									},
									"P_STREAM_SEQ_ID": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.P_STREAM_SEQ_ID",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "GET LATEST LOG",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SET LOAD_ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[CNTL].[PROC_CHK_LTST_PCS]",
								"storedProcedureParameters": {
									"P_LOAD_ID": {
										"type": "String",
										"value": {
											"value": "@variables('V_LOAD_ID')",
											"type": "Expression"
										}
									},
									"P_PCS_NM": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.P_PCS_NM",
											"type": "Expression"
										}
									},
									"P_RUN_MODE": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.P_RUN_MODE",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CHECK LATEST LOG",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GET LATEST LOG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('GET LATEST LOG').output.FIRSTROW.LTST_LOG_F,'1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "ABORT CHECK LATEST LOG",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": "SELECT 1/0",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SqlServerTable1",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "PASS CHECK LATEST LOG",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": "SELECT 1",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SqlServerTable1",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					},
					{
						"name": "GET DNDP",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CHECK LATEST LOG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[CNTL].[PROC_CHK_DPND_PCS]",
								"storedProcedureParameters": {
									"P_AS_AT_DT": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.P_AS_AT_DT",
											"type": "Expression"
										}
									},
									"P_LOAD_ID": {
										"type": "String",
										"value": {
											"value": "@variables('V_LOAD_ID')",
											"type": "Expression"
										}
									},
									"P_PCS_NM": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.P_PCS_NM",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CHECK DNDP",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GET DNDP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('GET DNDP').output.FIRSTROW.DPND_F,'1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "ABORT CHECK DNDP",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": "SELECT 1/0",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SqlServerTable1",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "PASS CHECK DNDP",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": "SELECT 1",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SqlServerTable1",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					},
					{
						"name": "SET LOAD_ID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "INSERT PROCESS LOG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "V_LOAD_ID",
							"value": {
								"value": "@activity('INSERT PROCESS LOG').output.FIRSTROW.LOAD_ID",
								"type": "Expression"
							}
						}
					},
					{
						"name": "UPDATE FAILED ON LATEST LOG",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CHECK LATEST LOG",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CNTL].[PROC_UDT_PCS]",
							"storedProcedureParameters": {
								"P_CNT_SRC": {
									"value": null,
									"type": "String"
								},
								"P_CNT_TGT": {
									"value": null,
									"type": "String"
								},
								"P_LOAD_ID": {
									"value": {
										"value": "@variables('V_LOAD_ID')",
										"type": "Expression"
									},
									"type": "String"
								},
								"P_PCS_NM": {
									"value": {
										"value": "@pipeline().parameters.P_PCS_NM",
										"type": "Expression"
									},
									"type": "String"
								},
								"P_RMRK": {
									"value": "PREVIOUS CYCLE PROCESS DID NOT COMPLETE",
									"type": "String"
								},
								"P_ST": {
									"value": "FAILED",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServer1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "UPDATE FAILED ON DEPENDENCIES",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CHECK DNDP",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CNTL].[PROC_UDT_PCS]",
							"storedProcedureParameters": {
								"P_CNT_SRC": {
									"value": null,
									"type": "String"
								},
								"P_CNT_TGT": {
									"value": null,
									"type": "String"
								},
								"P_LOAD_ID": {
									"value": {
										"value": "@variables('V_LOAD_ID')",
										"type": "Expression"
									},
									"type": "String"
								},
								"P_PCS_NM": {
									"value": {
										"value": "@pipeline().parameters.P_PCS_NM",
										"type": "Expression"
									},
									"type": "String"
								},
								"P_RMRK": {
									"value": "CHECKING DEPENDENCY FAILED",
									"type": "String"
								},
								"P_ST": {
									"value": "FAILED",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServer1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "UPDATE FAILED ON RUN DATABRICK MODEL",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SALES PREDICTION MODEL",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CNTL].[PROC_UDT_PCS]",
							"storedProcedureParameters": {
								"P_CNT_SRC": {
									"value": null,
									"type": "String"
								},
								"P_CNT_TGT": {
									"value": null,
									"type": "String"
								},
								"P_LOAD_ID": {
									"value": {
										"value": "@variables('V_LOAD_ID')",
										"type": "Expression"
									},
									"type": "String"
								},
								"P_PCS_NM": {
									"value": {
										"value": "@pipeline().parameters.P_PCS_NM",
										"type": "Expression"
									},
									"type": "String"
								},
								"P_RMRK": {
									"value": "FAILED ON RUN DATABRICK MODEL",
									"type": "String"
								},
								"P_ST": {
									"value": "FAILED",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServer1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "UPDATE SUCCESS",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SALES PREDICTION MODEL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CNTL].[PROC_UDT_PCS]",
							"storedProcedureParameters": {
								"P_CNT_SRC": {
									"value": null,
									"type": "String"
								},
								"P_CNT_TGT": {
									"value": null,
									"type": "String"
								},
								"P_LOAD_ID": {
									"value": {
										"value": "@variables('V_LOAD_ID')",
										"type": "Expression"
									},
									"type": "String"
								},
								"P_PCS_NM": {
									"value": {
										"value": "@pipeline().parameters.P_PCS_NM",
										"type": "Expression"
									},
									"type": "String"
								},
								"P_RMRK": {
									"value": null,
									"type": "String"
								},
								"P_ST": {
									"value": "SUCCESS",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServer1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"P_RUN_MODE": {
						"type": "string",
						"defaultValue": "R"
					},
					"P_PCS_NM": {
						"type": "string",
						"defaultValue": "999"
					},
					"P_STREAM_SEQ_ID": {
						"type": "string",
						"defaultValue": "-999"
					},
					"P_AS_AT_DT": {
						"type": "string",
						"defaultValue": "19000101"
					},
					"P_DATABRICKS": {
						"type": "string",
						"defaultValue": "999"
					}
				},
				"variables": {
					"V_STREAM_NM": {
						"type": "String",
						"defaultValue": "SALES_PRED"
					},
					"V_LOAD_ID": {
						"type": "String",
						"defaultValue": "-999"
					},
					"V_STREAM_RESULT": {
						"type": "String",
						"defaultValue": "-999"
					}
				},
				"folder": {
					"name": "COMMON JOB"
				},
				"annotations": [],
				"lastPublishTime": "2020-10-16T09:42:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Databrickslinked')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerTable1')]",
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/STREAM_COMMON')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SET PROCESS LIST",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GET PROCESS LIST",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SET AS_AT_DT",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SET STREAM_SEQ_ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "V_PCS_NM_LIST",
							"value": {
								"value": "@activity('GET PROCESS LIST').output.value",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GET PROCESS LIST",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "START STREAM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[CNTL].[PROC_GET_PCS_STREAM]",
								"storedProcedureParameters": {
									"P_STREAM_NM": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.P_STREAM_NM",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FOR EACH PROCESS",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SET PROCESS LIST",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('V_PCS_NM_LIST')",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 20,
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@startswith(pipeline().parameters.P_STREAM_NM,'DB')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "RUN_PCS_1",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "PCS_COMMON_1",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"P_PROCESS_NM": {
															"value": "@item().PCS_NM",
															"type": "Expression"
														},
														"P_RUN_MODE": {
															"value": "@pipeline().parameters.P_RUN_MODE",
															"type": "Expression"
														},
														"P_STREAM_SEQ_ID": {
															"value": "@variables('V_STREAM_SEQ_ID')",
															"type": "Expression"
														}
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "PCS_COMMON_DATABRICKS",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "PCS_COMMON_DATABRICKS",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "STREAM RESULT",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "UPDATE STREAM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[CNTL].[PROC_STREAM_RESULT]",
								"storedProcedureParameters": {
									"P_STREAM_NM": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.P_STREAM_NM",
											"type": "Expression"
										}
									},
									"P_STREAM_SEQ_ID": {
										"type": "String",
										"value": {
											"value": "@variables('V_STREAM_SEQ_ID')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "FINAL STREAM",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "FOR EACH PROCESS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[CNTL].[PROC_FINAL_STREAM]",
								"storedProcedureParameters": {
									"P_AS_AT_DT": {
										"type": "String",
										"value": {
											"value": "@variables('V_AS_AT_DT')",
											"type": "Expression"
										}
									},
									"P_STREAM_NM": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.P_STREAM_NM",
											"type": "Expression"
										}
									},
									"P_STREAM_SEQ_ID": {
										"type": "String",
										"value": {
											"value": "@variables('V_STREAM_SEQ_ID')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "GET EMAIL",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "FINAL STREAM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[CNTL].[PROC_GET_EMAIL]",
								"storedProcedureParameters": {
									"P_STREAM_NM": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.P_STREAM_NM",
											"type": "Expression"
										}
									},
									"P_STREAM_RESULT": {
										"type": "String",
										"value": {
											"value": "@activity('FINAL STREAM').output.FIRSTROW.STREAM_RESULT",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "SET AS_AT_DT",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "START STREAM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "V_AS_AT_DT",
							"value": {
								"value": "@activity('START STREAM').output.FIRSTROW.AS_AT_DT",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SET STREAM_SEQ_ID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "START STREAM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "V_STREAM_SEQ_ID",
							"value": {
								"value": "@activity('START STREAM').output.FIRSTROW.STREAM_SEQ_ID",
								"type": "Expression"
							}
						}
					},
					{
						"name": "START STREAM",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[CNTL].[PROC_CNTL_ACTV_STREAM]",
								"storedProcedureParameters": {
									"P_RUN_MODE": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.P_RUN_MODE",
											"type": "Expression"
										}
									},
									"P_STREAM_NM": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.P_STREAM_NM",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "UPDATE STREAM",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "FINAL STREAM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CNTL].[PROC_UDT_STREAM]",
							"storedProcedureParameters": {
								"P_STREAM_NM": {
									"value": {
										"value": "@pipeline().parameters.P_STREAM_NM",
										"type": "Expression"
									},
									"type": "String"
								},
								"P_STREAM_RESULT": {
									"value": {
										"value": "@activity('FINAL STREAM').output.firstrow.STREAM_RESULT",
										"type": "Expression"
									},
									"type": "String"
								},
								"P_STREAM_SEQ_ID": {
									"value": {
										"value": "@variables('V_STREAM_SEQ_ID')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServer1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"P_STREAM_NM": {
						"type": "string",
						"defaultValue": "ORACLE"
					},
					"P_RUN_MODE": {
						"type": "string",
						"defaultValue": "R"
					}
				},
				"variables": {
					"V_STREAM_RESULT": {
						"type": "String",
						"defaultValue": "-999"
					},
					"V_PCS_NM_LIST": {
						"type": "Array",
						"defaultValue": [
							999
						]
					},
					"V_AS_AT_DT": {
						"type": "String",
						"defaultValue": "19000101"
					},
					"V_STREAM_SEQ_ID": {
						"type": "String",
						"defaultValue": "-999"
					}
				},
				"folder": {
					"name": "COMMON JOB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerTable1')]",
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]",
				"[concat(variables('factoryId'), '/pipelines/PCS_COMMON_1')]",
				"[concat(variables('factoryId'), '/pipelines/PCS_COMMON_DATABRICKS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TEST DATABRICKS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "test",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/perath.c@outlook.com/Notebook-01"
						},
						"linkedServiceName": {
							"referenceName": "Databrickslinked",
							"type": "LinkedServiceReference"
						}
					}
				],
				"folder": {
					"name": "TEST"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Databrickslinked')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TEST EMAIL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "STREAM RESULT",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[CNTL].[PROC_STREAM_RESULT]",
								"storedProcedureParameters": {
									"P_STREAM_NM": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.STREAM_NM",
											"type": "Expression"
										}
									},
									"P_STREAM_SEQ_ID": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.STRAM_SEQ_ID",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "SEND EMAIL",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "STREAM RESULT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-08.southeastasia.logic.azure.com:443/workflows/4d3633648b8e4170a54134728e1215fb/triggers/request/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Frequest%2Frun&sv=1.0&sig=H2ABmTH98dea6_SDk6_X9hSJ6NwxIun4UfYXoFTTdPQ",
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"value": "{\n\"EmailTo\":\"sbpdl_int_202006@outlook.com\",\n\"Message\":\"@{activity('STREAM RESULT').output.firstrow.a}\",\n\"Asat_dt\":\"Jan 02, 2020\",\n\"StreamName\":\"EDW\"}\n",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"STREAM_NM": {
						"type": "string",
						"defaultValue": "EDW"
					},
					"STRAM_SEQ_ID": {
						"type": "string",
						"defaultValue": "4"
					}
				},
				"folder": {
					"name": "TEST"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TEST PROCESS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.P_AS_AT_DT",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "RUN_PCS_1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "ACTIVATE STREAM",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PCS_COMMON_1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"P_PROCESS_NM": {
												"value": "@pipeline().parameters.P_PCS_NM",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "ACTIVATE STREAM",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CNTL].[PROC_CNTL_ACTV_INDV_PCS]",
										"storedProcedureParameters": {
											"P_AS_AT_DT": {
												"value": {
													"value": "@item()",
													"type": "Expression"
												},
												"type": "String"
											},
											"P_PCS_NM": {
												"value": {
													"value": "@pipeline().parameters.P_PCS_NM",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SqlServer1",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"P_AS_AT_DT": {
						"type": "array",
						"defaultValue": [
							999
						]
					},
					"P_PCS_NM": {
						"type": "string",
						"defaultValue": "999"
					}
				},
				"folder": {
					"name": "TEST"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PCS_COMMON_1')]",
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "FileServer1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string",
						"defaultValue": "card_info.csv"
					},
					"path": {
						"type": "string",
						"defaultValue": "TL-Sent_chun"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().path",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/FileServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_container": {
						"type": "string",
						"defaultValue": "sentrisk"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": {
							"value": "@dataset().p_container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_container": {
						"type": "string",
						"defaultValue": "sentrisk"
					},
					"p_filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().p_filename",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().p_container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_container": {
						"type": "string",
						"defaultValue": "sentrisk"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": {
							"value": "@dataset().p_container",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Databrickslinked')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-6632200347325520.0.azuredatabricks.net/",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('Databrickslinked_accessToken')]"
					},
					"newClusterNodeType": "Standard_DS3_v2",
					"newClusterNumOfWorker": "2:5",
					"newClusterSparkEnvVars": {
						"PYSPARK_PYTHON": "/databricks/python3/bin/python3"
					},
					"newClusterVersion": "7.1.x-scala2.12"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('FileServer1_properties_typeProperties_host')]",
					"userId": "[parameters('FileServer1_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('FileServer1_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime2",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DAILY')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Daily 8:00(UTC+7) T+1",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-10-05T01:00:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MONTHLY')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Monthly 8:00(UTC+7) T+3",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Month",
						"interval": 1,
						"startTime": "2020-10-05T01:00:00Z",
						"timeZone": "UTC",
						"schedule": {
							"monthDays": [
								3
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/REPORT')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Report 13:00(UTC+7) T+4",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Month",
						"interval": 1,
						"startTime": "2020-12-04T06:00:00Z",
						"timeZone": "UTC",
						"schedule": {
							"monthDays": [
								4
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime2')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntimeSBP')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		}
	]
}